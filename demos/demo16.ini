[runtime]
sampler = minuit

[minuit]
verbose=T
; tolerance in log-like required
; this is passed to Minuit but it is
; a bit unclear how it is interpreted.
tolerance = 0.05

;save an ini file starting from the best-fit point
output_ini = demo16_output.ini 

; Save the cosmology info in this directory
save_dir=demo16

; Minimization strategy
strategy = medium


; You can also try:
; strategy = fast  
; to try to converge as fast as possible 
; but with more chance of missing the best-fit
; strategy = safe
; to converge more slowly but with less 
; chance of missing the best-fit

; Minimization algorithm
algorithm = migrad
;you can also try:
; strategy = simplex   
; To use the simplex algorithm instead of 
; mingrad.  This is usually worse but can
; occasionaly help for problems with
; extremely badly behaved derivatives of 
; the likelihood

; strategy = fallback
; To try mingrad but fall back to simplex
; if it fails.

; max number of function evaluations (per core)
maxiter = 1000

; save the covariance matrix here
save_cov = minuit_covmat.txt


[pipeline]
modules = consistency camb planck2015
values = demos/values16.ini
extra_output =

; We are now asking for some likelihoods
; at the end of the pipeline.  When doing
; MCMC this line specified the likelihoods to use
; for the acceptance.  Otherwise it just gets
; printed out
likelihoods = planck2015

[planck2015]
file = cosmosis-standard-library/likelihood/planck2015/planck_interface.so
; The Planck module has some file paths it needs setting
; These files can all be downloaded from the Planck archives
data_1 = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/planck2015/data/plik_lite_v18_TT.clik
data_2 = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/planck2015/data/commander_rc2_v1.1_l2_29_B.clik
; You can also add more here


[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=cmb
lmax=2550
feedback=0
do_tensors=F
do_lensing=F
do_nonlinear=F

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
