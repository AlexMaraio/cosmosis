[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm
sampler = emcee

[test]
; These are the parameters for this sampler.
; ; In this case there is just one parameter
save_dir=demo7_output


[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
walkers = 64
; This many samples is overkill, just to make the plots
; look a lot nicer
samples = 100
; This is the interval at which convergence diagnostics
; are performed
nsteps = 100

[pymc]
nsteps = 500
samples = 10000
adaptive_mcmc = True

;covmat = covmat6.txt
;covmat = covmat2.txt
; In adaptive MCMC the proposal covariance
; is gradually tuned whilst maintaining the overall
; chain convergence properties.  You could set:
; adaptive_mcmc = True
; and you would not need a covariance matrix.
; This converges faster than if you don't have a good
; covariance matrix but a little slower than if you have
; a good one.  It is a good choice for an initial run
; to get a good covmat.  In fact, that's how we made
; demos/covmat5.txt



[output]
filename = demo7.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = camb growthfunction rsd_fsigma
values = demos/values7.ini
likelihoods = rsd_fsigma
extra_output =
quiet=T
debug=F
timing=F

[maxlike]
; The values file we use in this example was
; created just like the one we made in demo4,
; by setting sampler = maxlike above, so that
; these settings were used:
output_ini = growth_fsigma_maxlike.ini
tolerance = 1e-6


[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax = 2000
feedback=2


[growthfunction]
file = cosmosis-standard-library/growth_factor/interface.so
redshift = 0.57

[rsd_fsigma]
file = cosmosis-standard-library/likelihood/rsd_fsigma/rsd_fsigma.py
mean = 
sigma = 
redshift = 
feedback = 1
