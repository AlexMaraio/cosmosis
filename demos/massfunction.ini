[runtime]
; The test sampler just runs a single parameter set
sampler = test


[test]
; These are the parameters for this sampler.
; ; In this case there is just one parameter
save_dir=demo_output_massfunction


[emcee]
; The emcee sampler uses the concept of walkers, a collection
; ; of live points.  Sampling is done along lines that connect
; ; pairs of walkers.  The number of walkers must be at least
; ; 2*nparam + 1, but in general more than that usually works
; ; better.
walkers = 16
; ; This many samples is overkill, just to make the plots
; ; look a lot nicer
samples = 10
; ; This is the interval at which convergence diagnostics
; ; are performed
nsteps = 1


[output]
filename = massfunction.txt
format = text
verbosity= debug


; If something goes wrong this will aid diagnosis
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
; The list of modules to be run, in this order.
; The modules named here must appear as sections below
modules = consistency camb mf_tinker evs cluster_mass
; The file to get cosmological and nuisance parameters
; from.
values = demos/mf_values.ini
likelihoods = evs maxmass
extra_output = 
quiet=T
debug=T
timing=F

; A module!  Camb, set to a mode where it does
; background evolution, CMB, and matter power
[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0
zmin = 1.3
zmax = 1.9
nz = 40

[cluster_mass]
file = cosmosis-standard-library/likelihood/cluster_mass/cluster_mass.py

[evs]
file =cosmosis-standard-library/likelihood/evs/evs.py
redshift = 1.6
output_pdf = 1

[mf_tinker]
file = cosmosis-standard-library/mass_function/mf_tinker/tinker_mf_module.so
redshift_zero = 0


; The consistency module translates between our chosen parameterization
; ; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
