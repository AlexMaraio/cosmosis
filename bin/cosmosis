#!/usr/bin/env python

import sys
import argparse

from cosmosis.runtime.config import Inifile
from cosmosis.runtime.pipeline import LikelihoodPipeline
import cosmosis.runtime.mpi_pool as mpi_pool
import cosmosis.samplers as samplers
import cosmosis.output as output_module


RUNTIME_INI_SECTION = "runtime"


# TODO: find better home for this.  Utils?
class ParseExtraParameters(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        result = {}
        for arg in values:
            section, param_value = arg.split('.',1)
            param,value = param_value.split('=',1)
            result[(section,param)] = value
        setattr(args, self.dest, result)

def main(args, pool=None):
    # load configuration 
    ini = Inifile(args.inifile, override=args.params)

    # create pipeline
    pipeline = LikelihoodPipeline(ini, override=args.variables) 

    # determine the type of sampling we want
    sample_method = ini.get(RUNTIME_INI_SECTION, "sampler", "test")
    if sample_method not in sampler_registry:
        raise ValueError("Unknown sampler method %s" % (sample_method,))

    #Get that sampler from the system
    sampler_class = sampler_registry[sample_method]

    #Now that we have a sampler we know whether we will need an
    #output file or not.  By default new samplers do need one.
    if sampler_class.needs_output:
        #create the output files and methods
        output_options = dict(ini.items('output'))
        # NOTE will need to change this if other non-MPI things are used
        #Additionally we tell the output here if
        #we are parallel or not
        if pool is not None:
            output_options['mpi'] = True
        #Generat the output from a factory
        output = output_module.output_from_options(output_options)
    else:
        #some samplers, like the test one, do not need an output
        #file of the usual type.  In fact giving them one would be
        #a bad idea, because they might over-write something important.
        #so we just give them none.
        output = None

    #Initialize our sampler, with the class we got above.
    #It needs an extra pool argument if it is a ParallelSampler.
    #All the parallel samplers can also act serially too.
    if pool:
        if not issubclass(sampler_class,ParallelSampler):
            raise ValueError("Sampler does not support parallel execution!")
        sampler = sampler_class(ini, pipeline, output, pool)
    else:
        sampler = sampler_class(ini, pipeline, output)
 
    #Set up the sampler - for example loading
    #any resources it needs or checking the ini file
    #for additional parameters
    sampler.config()

    # Run the sampler until convergence
    # which really means "finished" here - 
    # a sampler can "converge" just by reaching the 
    # limit of the number of samples it is allowed.
    if not pool or pool.is_master():
        while not sampler.is_converged():
            sampler.execute()
    else:
        sampler.worker()

if __name__=="__main__":
    parser = argparse.ArgumentParser(description="Run a pipeline with a single set of parameters", add_help=True)
    parser.add_argument("inifile", help="Input ini file of parameters")
#    parser.add_argument("outfile", help="Output results to file")
    parser.add_argument("--mpi",action='store_true',help="Run in MPI mode.")
#    parser.add_argument("--parallel",action='store_true',help="Run in multiprocess parallel mode.")
#    parser.add_argument("--debug", action='store_true', default=False, help="Print additional debugging information")
    parser.add_argument("-t", "--timing", action='store_true', default=False, help='Time each module in the pipeline')
    parser.add_argument("-p", "--params", nargs="*", action=ParseExtraParameters, help="Over-ride parameters in inifile, with format section.name=value")
    parser.add_argument("-v", "--variables", nargs="*", action=ParseExtraParameters, help="Over-ride variables in values file, with format section.name=value")
    args = parser.parse_args(sys.argv[1:])

    # initialize parallel workers
    if args.mpi:
        with mpi_pool.MPIPool() as pool:
            main(args,pool)
#    elif parallel:
#        pool = ProcessPool()
    else:
        main(args)
