# This file must be sourced, so that it can establish the appropriate
# environment for a development session.
# Note: this currently only supports bash

# detect COSMOSIS_SRC_DIR
if [ -z "$COSMOSIS_SRC_DIR" ]
then
  cosmosis_dir=$( (cd $( dirname ${BASH_SOURCE[0]}); /bin/pwd) )
  cosmosis_dir=${cosmosis_dir%/config}
  export COSMOSIS_SRC_DIR="$cosmosis_dir"
fi

product_db=`cat $COSMOSIS_SRC_DIR/config/ups`
if [ ! -f "$product_db/setups" ]
then
    echo "The directory $product_db does not appear to contain the UPS products."
    return 1
fi

# initialize UPS
source $product_db/setups
if [ -z "$PRODUCTS" ]
then
    echo "The setup of the UPS system has failed; please ask a local expert for assistance."
    return 1
fi

# Set the library path appropriate for our flavor.
libdir=${COSMOSIS_SRC_DIR}/cosmosis/datablock
flavor=$(ups flavor -1)
if [ "$flavor" == "Darwin64bit" ]
then
    export DYLD_LIBRARY_PATH=${libdir}:$DYLD_LIBRARY_PATH
else
    export LD_LIBRARY_PATH=${libdir}:$LD_LIBRARY_PATH
fi

export PATH=${COSMOSIS_SRC_DIR}/bin:$PATH
export PYTHONPATH=${COSMOSIS_SRC_DIR}:$PYTHONPATH

# allow user to override our PYTHONUSERBASE
if [ -z "$PYTHONUSERBASE" ]
then
  export PYTHONUSERBASE=${COSMOSIS_SRC_DIR}
fi

# setup UPS packages
setup -B scipy v0_13_0b -q +e5:+prof
setup -B gsl v1_16 -q +prof
setup -B fftw v3_3_3 -q +prof
setup -B cfitsio v3_35_0 -q +prof
setup -B pyfits v3_2a -q +e5:+prof
setup -B pyyaml v3_11 

if [ "$flavor" == "Darwin64bit" ]
then
    setup -B mpich v3_1 -q +e5:+prof
fi

export PS1="(cosmosis) $PS1"
